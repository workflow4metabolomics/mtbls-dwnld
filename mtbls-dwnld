#!/bin/bash
# vi: fdm=marker

# Constants {{{1
################################################################

PROG_NAME=$(basename $0)
PROG_PATH=$(dirname $0)
YES=yes

# Global variables {{{1
################################################################

ASPERA=
ASSAY_FILE=
DEBUG=0
HTML=
MATRIX_OUTPUT=
METADATA_ONLY=
OUTPUT=
PRIVATE=
QUIET=0
SAMPLE_NA_FILTERING=
SAMPLE_OUTPUT=
SKIP_DOWNLOAD=
TOKEN=
VARIABLE_NA_FILTERING=
VARIABLE_OUTPUT=
W4M_ALL_ASSAYS=
W4M_ALL_ASSAYS_DIR=
W4M_OUTPUT=

# Print help {{{1
################################################################

function print_help {
	echo "Usage: $PROG_NAME [options] study"
	echo
	echo "Retrieves a study from Metabolights database."
	echo "By default it uses the ftp server, but with -a option you can ask for using aspera server (you will need the aspera client ascp to be installed)."
	echo
	echo "Options:"
	echo "   -A, --w4m-all-assays        Extract all assays when converting to W4M format."
	echo "   -a, --aspera                Use aspera server for downloading. You need the ascp client to be installed, it is freely available for linux 64. See http://downloads.asperasoft.com."
	echo "   -d, --w4m-all-assays-dir    Path to directory where to put all W4M outputs."
	echo "   -e, --extract-by-ext  EXT   Extract all files having the same extension and place them inside a directory having this extension as name. You ca specify multiple extensions, separated by commas."
	echo "   -g, --debug                 Debug mode."
	echo "   -h, --help                  Print this help message."
	echo "	 -H, --html		       FILE  Write HTML file that list files contained in output directory."
	echo "   -m, --matrix-output   FILE  Set path for the W4M sample x variable matrix output file. Only used if -w option is set."
	echo "   -M, --metadata-only         Download only the metadata (ISA-Tab files i_*, m_*, s_* and a_*) files. This option has no effet if aspera is selected (option -a)."
	echo "   -o, --output          DIR   Set the output directory to use."
	echo "   -p, --private               Indicate the study to download is not public. This is meant for aspera download, since the URL will be different for a public or a private study."
	echo "   -q, --quiet                 Does not print any output. Can be specified twice in order to be real quiet."
	echo "   -s, --sample-output   FILE  Set path for the W4M sample metadata output file. Only used if -w option is set."
	echo "   -S, --samp-na-filering NAME Filter out NA values in the specified sample metadata columns. The value is comma separated list of column names."
	echo "   -t, --token           TOKEN Set the token or password to use."
	echo "   -v, --variable-output FILE  Set path for the W4M variable metadata output file. Only used if -w option is set."
	echo "   -V, --var-na-filering NAME  Filter out NA values in the specified variable metadata columns. The value is comma separated list of column names."
	echo "   -w, --w4m-output            Enable W4M format output.  This output consists in 3 tsv files: one for sample metadata, one for variable metadata, and one for sample x variable matrix. Use the options -s, -v and -m to set the paths for those 3 files."
	echo "   -z, --skip-download         Skip download step and use directly the zip file name or folder name provided on command line."
}

# Error {{{1
################################################################

function error {

	local msg=$1

	echo "ERROR: $msg" >&2

	exit 1
}

# Print debug msg {{{1
################################################################

function print_debug_msg {

	local dbglvl=$1
	local dbgmsg=$2

	[ $DEBUG -ge $dbglvl ] && echo "[DEBUG] $dbgmsg" >&2
}


# Read args {{{1
################################################################

function read_args {

	local args="$*" # save arguments for debugging purpose
	
	# Read options
	while true ; do
		shift_count=1
		case $1 in
			-A|--w4m-all-assays)    W4M_ALL_ASSAYS=$YES ;;
			-a|--aspera)            ASPERA=$YES ;;
			-d|--w4m-all-assays-dir) W4M_ALL_ASSAYS_DIR="$2" ; shift_count=2 ;;
			-e|--extract-by-ext)    EXTRACT_BY_EXT="$2" ; shift_count=2 ;;
			-f|--assay-file)        ASSAY_FILE="$2" ; shift_count=2 ;;
			-g|--debug)             DEBUG=$((DEBUG + 1)) ;;
			-h|--help)              print_help ; exit 0 ;;
			-H|--html)              HTML="$2" ; shift_count=2 ;;
			-m|--matrix-output)     MATRIX_OUTPUT="$2" ; shift_count=2 ;;
			-M|--metadata-only)     METADATA_ONLY=$YES ;;
			-o|--output)            OUTPUT="$2" ; shift_count=2 ;;
			-p|--private)           PRIVATE=$YES ;;
			-q|--quiet)             QUIET=$((QUIET + 1)) ;;
			-s|--sample-output)     SAMPLE_OUTPUT="$2" ; shift_count=2 ;;
			-S|--samp-na-filering)  SAMPLE_NA_FILTERING="$2" ; shift_count=2 ;;
			-t|--token)             TOKEN="$2" ; shift_count=2 ;;
			-v|--variable-output)   VARIABLE_OUTPUT="$2" ; shift_count=2 ;;
			-V|--var-na-filering)   VARIABLE_NA_FILTERING="$2" ; shift_count=2 ;;
			-w|--w4m-output)        W4M_OUTPUT=$YES ;;
			-z|--skip-download)     SKIP_DOWNLOAD=$YES ;;
			-) error "Illegal option $1." ;;
			--) error "Illegal option $1." ;;
			--*) error "Illegal option $1." ;;
			-?) error "Unknown option $1." ;;
			-[^-]*) split_opt=$(echo $1 | sed 's/^-//' | sed 's/\([a-zA-Z]\)/ -\1/g') ; set -- $1$split_opt "${@:2}" ;;
			*) break
		esac
		shift $shift_count
	done
	shift $((OPTIND - 1))

	# Read remaining arguments
	[ $# -eq 1 ] || error "You must specify one, and only one, study to retrieve."
	STUDY="$1"

	# Debug
	print_debug_msg 1 "Arguments are : $args"
	print_debug_msg 1 "Study to retrieve is : $STUDY"
	print_debug_msg 1 "Assay file is : $ASSAY_FILE"
	[[ -n $ASPERA ]] && print_debug_msg 1 "Aspera will be used."
	[[ -n $TOKEN ]] && print_debug_msg 1 "Token/Password is \"$TOKEN\"."
}

# Extract by extension {{{1
################################################################

function extract_by_ext {

	local folder="$1"

	for ext in $(echo $EXTRACT_BY_EXT | tr "," " ") ; do

		# Create destination directory
		if [[ -d $ext ]] ; then
			rm -r $ext
		fi
		mkdir $ext

		# Copy all files having this extension
		find $folder -iname "*.$ext" | xargs -I % cp % $ext
	done
}

# Convert to W4M output {{{1
################################################################

function convert_to_w4m_output {

	local folder="$1"

	# Output one assay
	local options=()
	[ -z "$ASSAY_FILE" ] || options+=(-f "$ASSAY_FILE")
	[ -z "$SAMPLE_OUTPUT" ] || options+=(-s "$SAMPLE_OUTPUT")
	[ -z "$VARIABLE_OUTPUT" ] || options+=(-v "$VARIABLE_OUTPUT")
	[ -z "$MATRIX_OUTPUT" ] || options+=(-m "$MATRIX_OUTPUT")
	[ -z "$SAMPLE_NA_FILTERING" ] || options+=(-S "$SAMPLE_NA_FILTERING")
	[ -z "$VARIABLE_NA_FILTERING" ] || options+=(-V "$VARIABLE_NA_FILTERING")
	$PROG_PATH/isatab2w4m "${options[@]}" -i "$folder"

	# Output all assays
	local options=()
	[[ $W4M_ALL_ASSAYS = $YES ]] && options+=(-a)
	[[ -z $W4M_ALL_ASSAYS_DIR ]] || options+=(-d "$W4M_ALL_ASSAYS_DIR")
	[ -z "$SAMPLE_NA_FILTERING" ] || options+=(-S "$SAMPLE_NA_FILTERING")
	[ -z "$VARIABLE_NA_FILTERING" ] || options+=(-V "$VARIABLE_NA_FILTERING")
	$PROG_PATH/isatab2w4m "${options[@]}" -i "$folder"
}

# Download {{{1
################################################################

function download {

	local tmp_output=$1
	local dwnld_flags=

	# Silence downloader output
	[[ $QUIET -eq 0 ]] || dwnld_flags=-q

	# aspera
	if [ -n "$ASPERA" ] ; then

		dwnld_flags+=" -QT -l 1g"
		[ -n "$(which ascp)" ] || error "ascp command not found. Please install Aspera client."

		export ASPERA_SCP_PASS="$TOKEN"
		src=

		if [[ -z $PRIVATE ]] ; then

			# Make full path for public study
			study_path=$STUDY
			if [[ -z ${study_path##MTBLS*} ]] ; then
				study_path="/studies/public/$study_path"
			fi
			src="fasp-ml@fasp.ebi.ac.uk:$study_path"

		else
			src="mtblight@ah01.ebi.ac.uk:$STUDY"
		fi

		dwnld_cmd="ascp $dwnld_flags $src ."

	# wget
	else
		[ -n "$(which wget)" ] || error "wget command not found."

		tmp_output+=.zip
		file=$(basename $STUDY)
		if [ -n "$METADATA_ONLY" ]; then
			file=metadata
		fi
		dwnld_cmd="wget $dwnld_flags -O $tmp_output http://www.ebi.ac.uk/metabolights/$(basename $STUDY)/files/$file"
		if [ -n "$TOKEN" ] ; then
			dwnld_cmd+="?token=$TOKEN"
		fi
	fi

	# Run download command
	print_debug_msg 1 "wget: $(which wget)"
	print_debug_msg 1 "ascp: $(which ascp)"
	print_debug_msg 1 "Download command: $dwnld_cmd"
	if [[ $QUIET -ge 2 ]] ; then
		$dwnld_cmd 2>/dev/null >/dev/null
	else
		$dwnld_cmd
	fi
	[[ $? == 0 ]] || error "Downloading of study $STUDY has failed."
	if [ -f $tmp_output -a ! -s $tmp_output ] ; then
		echo "Cannot download $tmp_output file. Command \"$dwnld_cmd\" has failed." >&2
		exit 1
	fi

	echo "$tmp_output"
}

# Unzip study {{{1
################################################################

function unzip_study {

	local tmp_output=$1
	local unzip_flags=

	# Silence unzip program
	[[ $QUIET -eq 0 ]] || unzip_flags=-qq

	print_debug_msg 1 "Unzipping file \"$tmp_output\"."

	[ -n "$(which unzip)" ] || error "unzip command not found. Please install zip package."

	zip=$tmp_output
	print_debug_msg 1 "Zipped file is \"$zip\"."
	tmp_output=${zip%.*}
	print_debug_msg 1 "Output directory will be \"$tmp_output\"."
	[[ -d "$tmp_output" ]] && rm -r "$tmp_output"
	curdir=$(pwd)
	mkdir $tmp_output
	cd $tmp_output
	unzip $unzip_flags "$curdir/$zip" || error "Unable to unzip archive $curdir/$zip."
	cd $curdir

	echo $tmp_output
}

# Output HTML {{{1
################################################################

function output_html {

	local HTML=$1
	local tmp_output=$2

	cat >$HTML <<EOF
<html>
	<header>
		<title>Metabolights study</title>
	</header>
	<body>
		<a href="i_Investigation.txt">Investigation file</a><br/>
EOF

	echo "<br/>" >>$HTML
	echo "		Study files:<br/>" >>$HTML
	for f in $tmp_output/s_* ; do
		filename=$(basename "$f")
		echo "		<a href=\"$filename\">$filename</a><br/>" >>$HTML
	done

	echo "<br/>" >>$HTML
	echo "		Assay files:<br/>" >>$HTML
	for f in $tmp_output/a_* ; do
		filename=$(basename "$f")
		echo "		<a href=\"$filename\">$filename</a><br/>" >>$HTML
	done

	echo "<br/>" >>$HTML
	echo "		Data files:<br/>" >>$HTML
	for f in $tmp_output/m_* ; do
		filename=$(basename "$f")
		echo "		<a href=\"$filename\">$filename</a><br/>" >>$HTML
	done

	cat >>$HTML <<EOF
	</body>
</html>
EOF
}

# MAIN {{{1
################################################################

read_args "$@"

tmp_output=$(basename $STUDY)

if [[ -z $SKIP_DOWNLOAD ]] ; then
	tmp_output=$(download "$tmp_output")
fi

# Zip file?
if [[ ${tmp_output##*.} == 'zip' ]] ; then
	tmp_output=$(unzip_study "$tmp_output")
fi

# Convert to W4M format
if [[ -n $W4M_OUTPUT ]] ; then
	convert_to_w4m_output "$tmp_output"
fi

# Extract files by extension
if [[ -n $EXTRACT_BY_EXT ]] ; then
	extract_by_ext "$tmp_output"
fi

# Write HTML
if [[ -n $HTML ]] ; then
	output_html "$HTML" "$tmp_output"
fi

# Rename output directory
if [[ -n $OUTPUT ]] ; then
	mv $tmp_output $OUTPUT
fi
